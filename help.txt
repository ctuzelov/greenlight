Directories: {
    The bin directory will contain our compiled application binaries, ready for deployment
    to a production server.
    The cmd/api directory will contain the application-specific code for our Greenlight API
    application. This will include the code for running the server, reading and writing HTTP
    requests, and managing authentication.
    The internal directory will contain various ancillary packages used by our API. It will
    contain the code for interacting with our database, doing data validation, sending emails
    and so on. Basically, any code which isn’t application-specific and can potentially be
    reused will live in here. Our Go code under cmd/api will import the packages in the
    internal directory (but never the other way around).
    The migrations directory will contain the SQL migration files for our database.
    The remote directory will contain the configuration files and setup scripts for our
    production server.
    The go.mod file will declare our project dependencies, versions and module path.
    The Makefile will contain recipes for automating common administrative tasks — like
    auditing our Go code, building binaries, and executing database migrations.
}

JSON: {
    Encoding: {
        When Go is encoding a particular type to JSON, it looks to see if the type has a MarshalJSON()
        method implemented on it. If it has, then Go will call this method to determine how to encode
        it.
        Strictly speaking, when Go is encoding a particular type to JSON it looks to see if the type
        satisfies the json.Marshaler interface, which looks like this
        If the type does satisfy the interface, then Go will call its MarshalJSON() method and use the
        []byte slice that it returns as the encoded JSON value
    }
    Customizations: {
        Hiding info: {
            Use the directive "-" in a json tag
            Another way is to adding ",omitempty" in a tag if the value is empty 
        }
        Fields : {
            Create a custom type for the chosen field (i.e. type Runtime int32) and implement a MarshalJSON()
            method on the costom type. And do not forget to wrap the obkect in double quotes to be a valid *JSON string*
            or there will be the following error: "json: error calling MarshalJSON for type data.Runtime: invalid character 'm' after top-level value"
            Important thing is that we can deliberately a value receiver rather than a pointer receiver like func (r *Runtime) MarshalJSON() ---->
            ---> "The rule about pointers vs. values for receivers is that value methods can be invoked on
            --->  pointers and values, but pointer methods can only be invoked on pointers."
        }
    }
    Decoding: {
        for the purpose of decoding JSON from a HTTP request body, using json.Decoder is generally the best choice. It’s more efficient than
        json.Unmarshal() , requires less code, and offers some helpful settings that you can use to tweak its behavior
        Errors: {
            1. json.SyntaxError || io.ErrUnexpectedEOF - There is a syntax problem with the JSON being decoded
            2. json.UnmarshalTypeError - A JSON value is not appropriate for the destination GO type
            3. json.InvalidUnmarshalError - The decode destination is not valid (usually because it is not a
                pointer). This is actually a problem with our application code, not the JSON itself
            4. io.EOF - The JSON being decoded is empty
        }
    }

}